#!/usr/bin/env -S uv --quiet run --script

# /// script
# requires-python = ">=3.12"
# dependencies = ["click", "boto3", "humanize", "rich", "httpx"]
# ///
import os
from pathlib import Path
from urllib.parse import urlparse, parse_qs
import httpx
import secrets
import sys
import unicodedata
import click
import boto3
import re
from datetime import datetime
import humanize
from rich.console import Console
from rich.table import Table

STORAGE_ACCESS_KEYS_KV = "8cc8046b600a4e4e82e65a180da58b67"

cloudflare_account_id = os.getenv("CLOUDFLARE_ACCOUNT_ID")
if not cloudflare_account_id:
    click.echo("Missing environment variable CLOUDFLARE_ACCOUNT_ID", err=True)
    sys.exit(1)

cloudflare_api_token = os.getenv("CLOUDFLARE_API_TOKEN")
if not cloudflare_api_token:
    click.echo("Missing environment variable cloudflare_api_token", err=True)
    sys.exit(1)

r2_access_key_id = os.getenv("R2_ACCESS_KEY_ID")
if not r2_access_key_id:
    click.echo("Missing environment variable R2_ACCESS_KEY_ID", err=True)
    sys.exit(1)

r2_access_key_secret = os.getenv("R2_ACCESS_KEY_SECRET")
if not r2_access_key_secret:
    click.echo("Missing environment variable R2_ACCESS_KEY_SECRET", err=True)
    sys.exit(1)

r2_region = "WNAM"
r2_bucket_public = "public"
r2_bucket_private = "private"
r2_short_uri = "https://anw.sh"
r2_bucket_public_uri = "https://pub.anw.sh"
r2_bucket_private_uri = "https://pri.anw.sh"


def get_r2_bucket(private: bool) -> tuple[str, str]:
    name = r2_bucket_private if private else r2_bucket_public
    uri = r2_bucket_private_uri if private else r2_bucket_public_uri
    return name, uri


def get_r2_client():
    return boto3.client(
        service_name="s3",
        endpoint_url=f"https://{cloudflare_account_id}.r2.cloudflarestorage.com",
        aws_access_key_id=r2_access_key_id,
        aws_secret_access_key=r2_access_key_secret,
        region_name=r2_region,
    )


class StorageKeysClient:
    def __init__(self):
        self.base_url = f"https://api.cloudflare.com/client/v4/accounts/{cloudflare_account_id}/storage/kv/namespaces"
        self.headers = {"Content-Type": "application/json", "Authorization": f"Bearer {cloudflare_api_token}"}
        self.namespace_id = STORAGE_ACCESS_KEYS_KV

    def _without_prefix(self, key: str):
        return key.removeprefix("private/")

    def _with_prefix(self, key: str):
        return "private/" + key.removeprefix("private/")

    def bulk_get(self, keys: list[str]):
        url = f"{self.base_url}/{self.namespace_id}/bulk"
        keys = [self._with_prefix(k) for k in keys]

        try:
            response = httpx.post(f"{url}/get", headers=self.headers, json={"keys": keys})
            response.raise_for_status()
            data = response.json()
            if data["success"]:
                values_dict = data["result"]["values"]
                new_values_dict = {}
                for k, v in values_dict.items():
                    new_values_dict[self._without_prefix(k)] = v
                return new_values_dict
            return None

        except httpx.HTTPError as e:
            click.echo(f"Error accessing KV store: {e}", err=True)
            sys.exit(1)
            return None

    def set(self, key: str, value: str):
        url = f"{self.base_url}/{self.namespace_id}/bulk"
        key = self._with_prefix(key)
        try:
            response = httpx.put(f"{url}", headers=self.headers, json=[{"key": key, "value": value}])
            response.raise_for_status()
            data = response.json()
            if data["success"]:
                return data["result"]["successful_key_count"] == 1
            return None

        except httpx.HTTPError as e:
            click.echo(f"Error accessing KV store: {e}", err=True)
            sys.exit(1)
            return None

    def bulk_delete(self, keys: list[str]):
        url = f"{self.base_url}/{self.namespace_id}/bulk"
        keys = [self._with_prefix(k) for k in keys]
        try:
            response = httpx.post(f"{url}/delete", headers=self.headers, json=keys)
            response.raise_for_status()
            data = response.json()
            if data["success"]:
                return data["result"]["successful_key_count"] == len(keys)
            return None

        except httpx.HTTPError as e:
            click.echo(f"Error accessing KV store: {e}", err=True)
            sys.exit(1)
            return None


@click.group(context_settings={"help_option_names": ["-h", "--help"]})
def cli():
    pass


@cli.command()
@click.argument("file", type=click.Path(exists=True))
@click.option("--key", help="The object key in R2 (defaults to file name)")
@click.option("--private", is_flag=True, help="Whether to use private or public bucket", default=False)
@click.option("--password", help="The password to set for this object (default will be randomly generated)")
def upload(file: Path, key: str, private: bool, password: str):
    """Upload a file to R2.

    \b
    Examples:
        $ r2 upload image.png
        $ r2 upload document.pdf --key docs/report.pdf
        $ r2 upload avatar.jpg --private
        $ r2 upload video.mp4 --key media/2024/video.mp4 --private
        $ r2 upload video.mp4 --key media/2024/video.mp4 --private --password 123
    """
    if password and not private:
        click.echo("--private flag is required when passing --password", err=True)
        sys.exit(1)

    if not key:
        key = Path(file).name
    key = normalize_filename(key)

    r2 = get_r2_client()
    bucket, _ = get_r2_bucket(private)

    with open(file, "rb") as f:
        r2.upload_fileobj(f, bucket, key)

    obj_url = f"{r2_short_uri}/{key}"

    if private:
        password = password or secrets.token_hex(10)
        kv_client = StorageKeysClient()
        kv_client.set(key, password)
        obj_url += f"?pw={password}"

    click.echo(obj_url)


@cli.command()
@click.argument("key", required=False)
@click.option("--private", is_flag=True, help="Whether to use private or public bucket", default=False)
def delete(key: str, private: bool):
    """Delete an object from R2. If no key is provided, reads keys from stdin.

    \b
    Examples:
        $ r2 delete image.png
        $ r2 delete docs/report.pdf --private
        $ r2 list --pattern "\\.png$" | r2 delete
        $ r2 list --private | r2 delete --private
    """
    r2 = get_r2_client()
    bucket, uri = get_r2_bucket(private)
    kv_client = StorageKeysClient() if private else None

    if not key:
        # Read from stdin if no key provided
        for line in sys.stdin:
            parsed_url = urlparse(line.strip())
            key = parsed_url.path[1:]
            query_params = parse_qs(parsed_url.query)
            pw = query_params["pw"][0] if "pw" in query_params else None

            if key:
                try:
                    r2.delete_object(Bucket=bucket, Key=key)
                    if pw:
                        kv_client.bulk_delete([key])
                        click.echo(f"Deleted: access key '{pw}'")

                    click.echo(f"Deleted: {uri}/{key}")
                except r2.exceptions.ClientError as e:
                    click.echo(f"Error deleting {uri}/{key}: {e}", err=True)
    else:
        try:
            r2.delete_object(Bucket=bucket, Key=key)
            click.echo(f"Deleted: {uri}/{key}")
        except r2.exceptions.ClientError as e:
            click.echo(f"Error deleting {uri}/{key}: {e}", err=True)
            sys.exit(1)


@cli.command()
@click.argument("key", required=False)
@click.option("--private", help="Whether to use private or public bucket", default=False)
def info(key: str, private: bool):
    """Get object information from R2.

    \b
    Examples:
        $ r2 info image.png
        $ r2 info docs/report.pdf --private
        $ r2 list | r2 info
        $ r2 list --private | r2 info --private
    """
    r2 = get_r2_client()
    bucket, uri = get_r2_bucket(private)

    try:
        objects = []
        if not key:
            # Read from stdin if no key provided
            for line in sys.stdin:
                key = line.strip().removeprefix(f"{r2_bucket_public_uri}/").removeprefix(f"{r2_bucket_private_uri}/")
                if key:
                    objects.append(get_object_info(r2, bucket, uri, key))
        else:
            objects.append(get_object_info(r2, bucket, uri, key))

        if objects:
            click.echo(format_objects_table(objects))
    except r2.exceptions.ClientError as e:
        if e.response["Error"]["Code"] == "404":
            click.echo(f"Not found: {uri}/{key}", err=True)
            sys.exit(1)
        raise


@cli.command()
@click.option("--prefix", help="Filter objects by prefix")
@click.option("--pattern", help="Filter objects by regex pattern")
@click.option("--private", is_flag=True, help="Whether to use private or public bucket", default=False)
@click.option("--count", type=int, help="Limit the number of objects to fetch")
@click.option("--all", is_flag=True, help="Fetch all pages (default: only first page)")
def list(prefix: str, pattern: str, private: bool, count: int, all: bool):
    """List objects in the R2 bucket.

    \b
    Examples:
        $ r2 list
        $ r2 list --prefix images/
        $ r2 list --pattern "\\.png$"
        $ r2 list --prefix photos/ --pattern "\\.jpg$"
        $ r2 list --private
        $ r2 list --count 10
        $ r2 list --all
    """
    r2 = get_r2_client()
    bucket, uri = get_r2_bucket(private)
    kv_client = StorageKeysClient() if private else None

    try:
        kwargs = {"Bucket": bucket}
        if prefix:
            kwargs["Prefix"] = prefix
        if count:
            kwargs["MaxKeys"] = count

        # Initialize an empty list to store all objects
        all_objects = []

        # Initialize pagination
        paginator = r2.get_paginator("list_objects_v2")
        page_iterator = paginator.paginate(**kwargs)

        # Iterate through pages
        for page in page_iterator:
            if "Contents" in page:
                all_objects.extend(page["Contents"])

            # If not fetching all pages, break after first page
            if not all:
                break

        # Apply regex pattern filtering if specified
        if pattern:
            try:
                regex = re.compile(pattern)
                all_objects = [obj for obj in all_objects if regex.search(obj["Key"])]
            except re.error as e:
                click.echo(f"Invalid regex pattern: {e}", err=True)
                sys.exit(1)

        # Sort objects by LastModified in descending order
        all_objects.sort(key=lambda x: x["LastModified"], reverse=True)

        pw_dict = {}
        if private:
            keys = [obj["Key"] for obj in all_objects]
            if keys:
                pw_dict = kv_client.bulk_get(keys)

        # Output results
        if all_objects:
            for obj in all_objects:
                obj_key = obj["Key"]
                url = f"{r2_short_uri}/{obj_key}"
                if private and obj_key in pw_dict:
                    url += f"?pw={pw_dict[obj_key]}"
                click.echo(url)

    except r2.exceptions.ClientError as e:
        click.echo(f"Error listing objects: {e}", err=True)
        sys.exit(1)
    except re.error as e:
        click.echo(f"Invalid regex pattern: {e}", err=True)
        sys.exit(1)


def format_objects_table(objects: list) -> str:
    """Format objects into a table string"""
    if not objects:
        return ""

    table = Table(show_header=True, header_style="bold")
    table.add_column("Name")
    table.add_column("Size")
    table.add_column("Modified")
    table.add_column("Type")

    for obj in objects:
        table.add_row(obj["name"], obj["size"], obj["age"], obj.get("content-type", "N/A"))

    console = Console(file=sys.stderr)
    console.print(table)
    return ""  # Return empty string since we've already printed the table


def get_object_info(r2, bucket: str, bucket_uri: str, key: str) -> dict:
    obj = r2.head_object(Bucket=bucket, Key=key)
    obj["_key"] = key  # Add key to object for formatting
    return {
        "name": obj["Key"].split("/")[-1] if "Key" in obj else obj["_key"].split("/")[-1],
        "size": humanize.naturalsize(obj["ContentLength"]),
        "age": humanize.naturaltime(datetime.now() - obj["LastModified"].replace(tzinfo=None)),
        "content-type": obj.get("ContentType"),
    }


def normalize_filename(filename: str):
    name, ext = os.path.splitext(filename)
    # Convert to lowercase and normalize unicode characters
    name = name.lower()
    name = unicodedata.normalize("NFKD", name).encode("ASCII", "ignore").decode("ASCII")
    # Replace spaces and unwanted characters with hyphens
    name = re.sub(r"[^\w\s-]", "", name)
    name = re.sub(r"[-\s]+", "-", name).strip("-")
    return f"{name}{ext.lower()}"


if __name__ == "__main__":
    cli()
