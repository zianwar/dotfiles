#!/usr/bin/env sh

# Utility for quickly exporting environment variables from file
# Usage: cat .env | exportenv
exportenv() {
  export $(xargs <$1)
}

# Split csv, each file having [lines] number of lines
function splitcsv {
  if [ "$#" -ne 2 ]; then
    printf "Usage:\n\n splitcsv [filename] [lines] \n"
    return 1
  fi

  local filename=$1
  local lines=$2
  header=$(head -n 1 $filename)

  split -l $lines $filename

  i=1
  for x in $(ls x* | sort); do
    # ensure csv headers are added to each split
    if [ "$(head -n 1 $x)" != "$header" ]; then
      echo -e "$header\n$(cat $x)" >$x
    fi

    # rename csv file
    mv $x ""$(basename $1 .csv)"_$i".csv
    i=$(($i + 1))
  done
}

function reset_git_history() {
  read -q "answer?Are you sure you want to reset git history for brach $1? [y/n] "
  print ""
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    git checkout --orphan temp_branch
    git add -A
    git commit -am "Initial commit"
    git branch -D $1
    git branch -m $1
    git push -f origin $1
  fi
}

# AnyBar
function anybar {
  echo -n $1 | nc -4u -w0 localhost ${2:-1738}
}

# open github repo from git repo
function hb() {
  # from https://jasonmccreary.me/articles/open-github-command-line/
  github_url=$(git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/')
  open $github_url
}

# inside tmux: only exit if we're not on the last pane
exit() {
  if [[ -z $TMUX ]]; then
    builtin exit
    return
  fi

  panes=$(tmux list-panes | wc -l)
  wins=$(tmux list-windows | wc -l)
  count=$(($panes + $wins - 1))
  if [ $count -eq 1 ]; then
    tmux detach
  else
    builtin exit
  fi
}

# Retry a command up to a specific numer of times until it exits successfully,
# with exponential back off.
# https://gist.github.com/sj26/88e1c6584397bb7c13bd11108a579746
#
#  $ retry 5 echo Hello
#  Hello
#
#  $ retry 5 false
#  Retry 1/5 exited 1, retrying in 1 seconds...
#  Retry 2/5 exited 1, retrying in 2 seconds...
#  Retry 3/5 exited 1, retrying in 4 seconds...
#  Retry 4/5 exited 1, retrying in 8 seconds...
#  Retry 5/5 exited 1, no more retries left.
#
function retry {
  local retries=$1
  shift

  local count=0
  # NOTE: $@ represents the command and any arguments that were passed to the function after the number of retries.
  # For example, if you call the retry function like this: `retry 3 some-command arg1 arg2`,
  # $@ would expand to `some-command arg1 arg2`, which would be executed by the until loop.
  # The "$@" syntax with the double quotes ensures that the command is executed as a command with arguments,
  # allowing arguments with spaces to be passed correctly.
  until "$@"; do
    exit=$?
    wait=$((2 ** $count))
    count=$(($count + 1))
    if [ $count -lt $retries ]; then
      echo "Retry $count/$retries exited $exit, retrying in $wait seconds..."
      sleep $wait
    else
      echo "Retry $count/$retries exited $exit, no more retries left."
      return $exit
    fi
  done
  return 0
}

# fzf helpers - https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh

# fcd - cd to selected directory
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
    -o -type d -print 2>/dev/null | fzf +m) &&
    cd "$dir"
}

# fh - search in your command history and execute selected command
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# copies media from current folder to local Raspberry Pi
sync_media() {
    # Parse the --no-delete flag
  no_delete=false
  while [[ "$1" != "" ]]; do
    case $1 in
      --no-delete )
        no_delete=true
        ;;
      * )
        echo "Invalid option: $1"
        return 1
        ;;
    esac
    shift
  done
  
  file=$(find . -maxdepth 1 -not -path '*/.*' -print0| xargs -0 gum choose)
  file_kind=$(gum choose "Show" "Movie" --selected "Movie")
  # If a file is chosen, display the selection
  if [ -n "$file" ]; then
      echo "Syncing $(gum style --foreground 212 "$file")"
      rsync -r --progress "$file" "anwar@rpi5.local:/mnt/media/${file_kind}s"
      if [ $? -eq 0 ]; then
        if [ "$no_delete" = false ]; then
          trash $file && echo "Moved file to trash $(gum style --foreground 212 "$file")"
        else
          echo "Skipping deletion of $(gum style --foreground 212 "$file") due to --no-delete flag"
        fi
      fi
  else
      echo "No file selected"
  fi
}


yt() {
    video_link="$1"
    output="${2:-/tmp/yt.txt}"
    tmpfile="/tmp/transcript.en.srt"
    yt-dlp --quiet --no-warnings --skip-download --write-subs --write-auto-subs --sub-lang en --sub-format ttml --convert-subs srt --output "/tmp/transcript.%(ext)s" $video_link
    cat $tmpfile | sed '/^$/d' | grep -v '^[0-9]*$' | grep -v '\-->' | sed 's/<[^>]*>//g' | tr '\n' ' ' | sed 's/ *$/\n/' >"$output"
    trash $tmpfile
    cat $output
}

# select_file
sf() {
  find . -maxdepth 1 -not -path '*/.*' -print0| xargs -0 gum choose
}
